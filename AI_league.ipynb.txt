{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Lama506/arabic-sign-language/blob/main/AI_league.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oGBxYGN0O4Up",
        "outputId": "1926d8ed-dd0d-4148-ab42-8cb1784c84ba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "تم إنشاء الصور وملف CSV بنجاح!\n"
          ]
        }
      ],
      "source": [
        "from PIL import Image\n",
        "import os\n",
        "import csv\n",
        "\n",
        "# تحميل الصورة الأصلية\n",
        "image_path = \"/content/Screenshot 2025-04-08 184526.png\"\n",
        "image = Image.open(image_path)\n",
        "\n",
        "# عدد الصفوف والأعمدة في الصورة\n",
        "rows, cols = 5, 7\n",
        "\n",
        "# حجم كل خانة\n",
        "cell_width = image.width // cols\n",
        "cell_height = image.height // rows\n",
        "\n",
        "arabic_letters = [\n",
        "    \"خ\", \"ح\", \"ج\", \"ث\", \"ت\", \"ب\", \"ا\",\n",
        "    \"ص\", \"ش\", \"س\", \"ز\", \"ر\", \"ذ\", \"د\",\n",
        "    \"ق\", \"ف\", \"غ\", \"ع\", \"ظ\", \"ط\", \"ض\",\n",
        "    \"ي\", \"و\", \"ه\", \"ن\", \"م\", \"ل\", \"ك\",\n",
        "    \"آ\", \"إ\", \"أ\", \"ؤ\", \"ئ\", \"ء\", \"لا\"\n",
        "]\n",
        "\n",
        "\n",
        "\n",
        "# عكس ترتيب الحروف من اليمين لليسار\n",
        "#arabic_letters.reverse()\n",
        "\n",
        "\n",
        "# إنشاء مجلد لحفظ الصور المقصوصة\n",
        "output_dir = \"letters\"\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "\n",
        "# بيانات CSV\n",
        "csv_data = [(\"image_filename\", \"letter\")]\n",
        "\n",
        "# تقسيم الصورة\n",
        "counter = 0\n",
        "for row in range(rows):\n",
        "    for col in range(cols):\n",
        "        left = col * cell_width\n",
        "        upper = row * cell_height\n",
        "        right = left + cell_width\n",
        "        lower = upper + cell_height\n",
        "        cropped = image.crop((left, upper, right, lower)).convert(\"RGB\")\n",
        "        letter = arabic_letters[counter]\n",
        "        filename = f\"{letter}.jpg\"\n",
        "        filepath = os.path.join(output_dir, filename)\n",
        "        cropped.save(filepath)\n",
        "        csv_data.append((filename, letter))\n",
        "        counter += 1\n",
        "\n",
        "# إنشاء ملف CSV\n",
        "with open(\"arabic_sign_language.csv\", mode=\"w\", newline='', encoding=\"utf-8\") as file:\n",
        "    writer = csv.writer(file)\n",
        "    writer.writerows(csv_data)\n",
        "\n",
        "print(\"تم إنشاء الصور وملف CSV بنجاح!\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ✅ تثبيت المتطلبات\n",
        "!pip install -q openai-whisper ffmpeg-python genai\n",
        "\n",
        "# ✅ استيراد المكتبات\n",
        "import whisper\n",
        "import os\n",
        "import datetime\n",
        "from google.colab import files\n",
        "from IPython.display import display, HTML\n",
        "from PIL import Image\n",
        "import cv2\n",
        "import numpy as np\n",
        "import genai\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jmlS1EI8O5Nv",
        "outputId": "2d04cbfb-0c8a-4e9e-e9ec-dd965e90a984"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m830.9/830.9 kB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m76.5/76.5 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m45.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m11.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m53.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m43.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m85.4/85.4 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Building wheel for openai-whisper (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "google-colab 1.0.0 requires ipython==7.34.0, but you have ipython 8.35.0 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0m"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip uninstall -y genai\n",
        "!pip install -q google-generativeai\n",
        "\n",
        "import google.generativeai as genai\n",
        "import re\n",
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "from PIL import Image"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HxPaeUMjTptL",
        "outputId": "8c9e60a7-6056-47f1-dd75-8eed0ebc084e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[33mWARNING: Skipping genai as it is not installed.\u001b[0m\u001b[33m\n",
            "\u001b[0m"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ✅ 3. تحميل نموذج whisper\n",
        "model = whisper.load_model(\"base\")\n",
        "\n",
        "# ✅ 4. تحويل الفيديو إلى نص\n",
        "video_path = \"/content/Screen Recording 2025-04-08 023046.mp4\"\n",
        "result = model.transcribe(video_path, language=\"ar\")\n",
        "arabic_text = result['text']\n",
        "print(\"📄 النص المستخرج:\", arabic_text)\n",
        "\n",
        "# ✅ إعداد Gemini\n",
        "genai.configure(api_key=\"AIzaSyD6m88SOk3u-BufsNRr8LVyMfPuROH6KYM\")\n",
        "model = genai.GenerativeModel(\"models/gemini-1.5-flash\")\n",
        "\n",
        "# ✅ 5. دوال تنظيف النص وتطبيع الحروف\n",
        "def replace_arabic_letters(text):\n",
        "    replacements = {\n",
        "        \"أ\": \"ا\",\n",
        "        \"إ\": \"ا\",\n",
        "        \"آ\": \"ا\",\n",
        "        \"ة\": \"ه\",\n",
        "        \"ى\": \"ي\",\n",
        "        \"ئ\": \"ي\",\n",
        "        \"ؤ\": \"و\",\n",
        "    }\n",
        "    for src, target in replacements.items():\n",
        "        text = text.replace(src, target)\n",
        "    return text\n",
        "\n",
        "def clean_text(text):\n",
        "    # إزالة التشكيل\n",
        "    text = re.sub(r'[\\u064B-\\u065F]', '', text)\n",
        "    # إزالة علامات الترقيم\n",
        "    text = re.sub(r'[^\\w\\s]', '', text)\n",
        "    return text\n",
        "\n",
        "# ✅ استخراج الكلمات المفتاحية\n",
        "def extract_keywords_gemini(text):\n",
        "    processed_text = replace_arabic_letters(clean_text(text))\n",
        "    prompt = f\"استخرج الكلمات المفتاحية فقط من الجملة التالية بدون شرح:\\n{processed_text}\"\n",
        "    response = model.generate_content(prompt)\n",
        "    result = response.text\n",
        "    raw_keywords = [k.strip() for k in result.replace(\"،\", \",\").split(\",\") if k.strip()]\n",
        "    keywords = [replace_arabic_letters(clean_text(k)) for k in raw_keywords]\n",
        "    print(f\"🔑 الكلمات المفتاحية (Gemini): {keywords}\")\n",
        "    return keywords\n",
        "\n",
        "# ✅ 6. تحويل الكلمات إلى صور حروف\n",
        "def make_sign_sequence_from_text(text, letters_path=\"/content/letters\"):\n",
        "    images = []\n",
        "    for word in text.split():\n",
        "        # يمكنك عرض الكلمة كاملة كصورة هنا لو عندك صورة لكل كلمة\n",
        "        for letter in word:\n",
        "            img_path = os.path.join(letters_path, f\"{letter}.jpg\")\n",
        "            if os.path.exists(img_path):\n",
        "                images.append(Image.open(img_path))\n",
        "            else:\n",
        "                print(f\"❌ لا يوجد صورة للحرف: {letter}\")\n",
        "    return images\n",
        "\n",
        "# ✅ 7. دمج الصور إلى فيديو\n",
        "def save_images_as_video(images, output_path=\"output_video.mp4\", fps=1):\n",
        "    if not images:\n",
        "        print(\"❌ لا توجد صور\")\n",
        "        return\n",
        "\n",
        "    width, height = images[0].size\n",
        "    fourcc = cv2.VideoWriter_fourcc(*'mp4v')\n",
        "    video = cv2.VideoWriter(output_path, fourcc, fps, (width, height))\n",
        "\n",
        "    for img in images:\n",
        "        img_np = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)\n",
        "        video.write(img_np)\n",
        "\n",
        "    video.release()\n",
        "    print(f\"✅ تم إنشاء الفيديو: {output_path}\")\n",
        "\n",
        "# ✅ 8. تنفيذ كامل التسلسل\n",
        "keywords = extract_keywords_gemini(arabic_text)\n",
        "all_images = []\n",
        "for word in keywords:\n",
        "    all_images.extend(make_sign_sequence_from_text(word))\n",
        "\n",
        "save_images_as_video(all_images)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 124
        },
        "id": "U_htVX0CTi47",
        "outputId": "faf0230a-d86f-448a-a6e0-48a5a468bc6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/whisper/transcribe.py:126: UserWarning: FP16 is not supported on CPU; using FP32 instead\n",
            "  warnings.warn(\"FP16 is not supported on CPU; using FP32 instead\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📄 النص المستخرج:  تاوت الكرامرة نخرى لقاء المشاهدين متابعين يجتمع فيه كله عناصر الإثارة والمتعب كلما نتظرة فقط بداية هذا الدربي اهدافه لقتاته فرصه جماليات مهاراتة لاحد\n",
            "🔑 الكلمات المفتاحية (Gemini): ['لقاء', 'مشاهده', 'اثاره', 'متعه', 'درب', 'اهداف', 'لحظات', 'فرص', 'جماليات', 'مهارات']\n",
            "✅ تم إنشاء الفيديو: output_video.mp4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ✅ 9. التقييم المتقدم (Advanced Evaluation)\n",
        "\n",
        "from sklearn.metrics import precision_score, recall_score, f1_score\n",
        "\n",
        "# التطبيع نفسه\n",
        "def normalize_arabic(word):\n",
        "    return replace_arabic_letters(word)\n",
        "\n",
        "# الحروف المتوقعة بعد التطبيع\n",
        "expected_keywords= keywords\n",
        "expected_letters = []\n",
        "for word in expected_keywords:\n",
        "    word = normalize_arabic(word)\n",
        "    expected_letters.extend(list(word))\n",
        "\n",
        "# الحروف التي ظهرت فعلياً\n",
        "predicted_letters = [os.path.basename(img.filename).replace('.jpg', '') for img in all_images]\n",
        "\n",
        "# قص القوائم لأقصر طول حتى نقدر نحسب metrics حرف بحرف\n",
        "min_len = min(len(expected_letters), len(predicted_letters))\n",
        "y_true = expected_letters[:min_len]\n",
        "y_pred = predicted_letters[:min_len]\n",
        "\n",
        "# Precision, Recall, F1 (على مستوى الحرف)\n",
        "precision = precision_score(y_true, y_pred, average='micro')\n",
        "recall = recall_score(y_true, y_pred, average='micro')\n",
        "f1 = f1_score(y_true, y_pred, average='micro')\n",
        "\n",
        "print(f\"📌 عدد الحروف المقارنة: {min_len}\")\n",
        "print(f\"✅ Precision: {precision * 100:.2f}%\")\n",
        "print(f\"✅ Recall:    {recall * 100:.2f}%\")\n",
        "print(f\"✅ F1 Score:  {f1 * 100:.2f}%\")\n",
        "\n",
        "# ✅ تقييم التغطية Coverage\n",
        "total_letters = sum(len(normalize_arabic(word)) for word in expected_keywords)\n",
        "covered_letters = len(predicted_letters)\n",
        "coverage = covered_letters / total_letters * 100\n",
        "print(f\"\\n📦 تغطية الصور (coverage): {coverage:.2f}%\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z4hX7N0zZaBg",
        "outputId": "70db70ab-fa5f-4427-c621-6128fcc5175d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📌 عدد الحروف المقارنة: 48\n",
            "✅ Precision: 100.00%\n",
            "✅ Recall:    100.00%\n",
            "✅ F1 Score:  100.00%\n",
            "\n",
            "📦 تغطية الصور (coverage): 100.00%\n"
          ]
        }
      ]
    }
  ]
}